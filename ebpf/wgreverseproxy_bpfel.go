// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64 || wasm

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type WgReverseProxyMetricsKey struct {
	_      structs.HostLayout
	Dir    uint8
	Reason uint8
	Pad    uint16
}

type WgReverseProxyMetricsValue struct {
	_       structs.HostLayout
	Packets uint64
	Bytes   uint64
}

type WgReverseProxyObfuscationConfig struct {
	_              structs.HostLayout
	Enabled        uint32
	Method         uint32
	Key            [32]uint8
	KeyLen         uint32
	TargetServerIp uint32
}

// LoadWgReverseProxy returns the embedded CollectionSpec for WgReverseProxy.
func LoadWgReverseProxy() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_WgReverseProxyBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load WgReverseProxy: %w", err)
	}

	return spec, err
}

// LoadWgReverseProxyObjects loads WgReverseProxy and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*WgReverseProxyObjects
//	*WgReverseProxyPrograms
//	*WgReverseProxyMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadWgReverseProxyObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadWgReverseProxy()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// WgReverseProxySpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type WgReverseProxySpecs struct {
	WgReverseProxyProgramSpecs
	WgReverseProxyMapSpecs
	WgReverseProxyVariableSpecs
}

// WgReverseProxyProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type WgReverseProxyProgramSpecs struct {
	WgReverseProxy *ebpf.ProgramSpec `ebpf:"wg_reverse_proxy"`
}

// WgReverseProxyMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type WgReverseProxyMapSpecs struct {
	MetricsMap           *ebpf.MapSpec `ebpf:"metrics_map"`
	ObfuscationConfigMap *ebpf.MapSpec `ebpf:"obfuscation_config_map"`
	StatsMap             *ebpf.MapSpec `ebpf:"stats_map"`
}

// WgReverseProxyVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type WgReverseProxyVariableSpecs struct {
}

// WgReverseProxyObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadWgReverseProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type WgReverseProxyObjects struct {
	WgReverseProxyPrograms
	WgReverseProxyMaps
	WgReverseProxyVariables
}

func (o *WgReverseProxyObjects) Close() error {
	return _WgReverseProxyClose(
		&o.WgReverseProxyPrograms,
		&o.WgReverseProxyMaps,
	)
}

// WgReverseProxyMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadWgReverseProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type WgReverseProxyMaps struct {
	MetricsMap           *ebpf.Map `ebpf:"metrics_map"`
	ObfuscationConfigMap *ebpf.Map `ebpf:"obfuscation_config_map"`
	StatsMap             *ebpf.Map `ebpf:"stats_map"`
}

func (m *WgReverseProxyMaps) Close() error {
	return _WgReverseProxyClose(
		m.MetricsMap,
		m.ObfuscationConfigMap,
		m.StatsMap,
	)
}

// WgReverseProxyVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadWgReverseProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type WgReverseProxyVariables struct {
}

// WgReverseProxyPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadWgReverseProxyObjects or ebpf.CollectionSpec.LoadAndAssign.
type WgReverseProxyPrograms struct {
	WgReverseProxy *ebpf.Program `ebpf:"wg_reverse_proxy"`
}

func (p *WgReverseProxyPrograms) Close() error {
	return _WgReverseProxyClose(
		p.WgReverseProxy,
	)
}

func _WgReverseProxyClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed wgreverseproxy_bpfel.o
var _WgReverseProxyBytes []byte
